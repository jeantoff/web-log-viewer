<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft fxcop 10.0\Xml\FxCopReport.xsl"?>
<FxCopReport Version="10.0">
 <Targets>
  <Target Name="C:\Users\cbv\Documents\csharpproj\weblogviewer\WebLogViewver\bin\Debug\WebLogViewver.exe">
   <Modules>
    <Module Name="weblogviewver.exe">
     <Messages>
      <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Status="Active" Created="2013-07-30 12:55:12Z" FixCategory="NonBreaking">
       <Issue Name="NoStrongName" Certainty="95" Level="CriticalError">Sign 'WebLogViewver.exe' with a strong name key.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithNeutralResourcesLanguage" Category="Microsoft.Performance" CheckId="CA1824" Status="Active" Created="2013-07-30 12:55:12Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Warning">Because assembly 'WebLogViewver.exe' contains a ResX-based resource file, mark it with the NeutralResourcesLanguage attribute, specifying the language of the resources within the assembly. This could improve lookup performance the first time a resource is retrieved.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="WebLogViewver">
       <Types>
        <Type Name="MainForm" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ApplyConfig(WebLogViewver.WblvConfig)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2013-07-30 12:55:12Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\cbv\Documents\csharpproj\weblogviewer\WebLogViewver" File="MainForm.cs" Line="119">'MainForm.ApplyConfig(WblvConfig)' calls into 'FileSystemWatcher.EnableRaisingEvents.set(bool)' which has a LinkDemand. By making this call, 'FileSystemWatcher.EnableRaisingEvents.set(bool)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'MainForm.ApplyConfig(WblvConfig)'&#xD;&#xA;   -&gt;'MainForm.ApplyConfig(WblvConfig)'&#xD;&#xA;   -&gt;'MainForm.MainForm()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\cbv\Documents\csharpproj\weblogviewer\WebLogViewver" File="MainForm.cs" Line="119">'MainForm.ApplyConfig(WblvConfig)' calls into 'FileSystemWatcher.Path.set(string)' which has a LinkDemand. By making this call, 'FileSystemWatcher.Path.set(string)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'MainForm.ApplyConfig(WblvConfig)'&#xD;&#xA;   -&gt;'MainForm.ApplyConfig(WblvConfig)'&#xD;&#xA;   -&gt;'MainForm.MainForm()'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InitializeComponent()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2013-07-30 12:55:12Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\cbv\Documents\csharpproj\weblogviewer\WebLogViewver" File="MainForm.Designer.cs" Line="39">'MainForm.InitializeComponent()' calls into 'FileSystemWatcher.Changed.add(FileSystemEventHandler)' which has a LinkDemand. By making this call, 'FileSystemWatcher.Changed.add(FileSystemEventHandler)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'MainForm.InitializeComponent()'&#xD;&#xA;   -&gt;'MainForm.InitializeComponent()'&#xD;&#xA;   -&gt;'MainForm.MainForm()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\cbv\Documents\csharpproj\weblogviewer\WebLogViewver" File="MainForm.Designer.cs" Line="39">'MainForm.InitializeComponent()' calls into 'FileSystemWatcher.Deleted.add(FileSystemEventHandler)' which has a LinkDemand. By making this call, 'FileSystemWatcher.Deleted.add(FileSystemEventHandler)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'MainForm.InitializeComponent()'&#xD;&#xA;   -&gt;'MainForm.InitializeComponent()'&#xD;&#xA;   -&gt;'MainForm.MainForm()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\cbv\Documents\csharpproj\weblogviewer\WebLogViewver" File="MainForm.Designer.cs" Line="39">'MainForm.InitializeComponent()' calls into 'FileSystemWatcher.EnableRaisingEvents.set(bool)' which has a LinkDemand. By making this call, 'FileSystemWatcher.EnableRaisingEvents.set(bool)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'MainForm.InitializeComponent()'&#xD;&#xA;   -&gt;'MainForm.InitializeComponent()'&#xD;&#xA;   -&gt;'MainForm.MainForm()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\cbv\Documents\csharpproj\weblogviewer\WebLogViewver" File="MainForm.Designer.cs" Line="39">'MainForm.InitializeComponent()' calls into 'FileSystemWatcher.SynchronizingObject.set(ISynchronizeInvoke)' which has a LinkDemand. By making this call, 'FileSystemWatcher.SynchronizingObject.set(ISynchronizeInvoke)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'MainForm.InitializeComponent()'&#xD;&#xA;   -&gt;'MainForm.InitializeComponent()'&#xD;&#xA;   -&gt;'MainForm.MainForm()'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveTab(System.Int32)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300" Status="Active" Created="2013-07-30 12:55:12Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\cbv\Documents\csharpproj\weblogviewer\WebLogViewver" File="MainForm.cs" Line="316">Change 'MainForm.RemoveTab(int)' to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateTab(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2013-07-30 12:55:12Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\cbv\Documents\csharpproj\weblogviewer\WebLogViewver" File="MainForm.cs" Line="198">'MainForm.UpdateTab(string)' calls into 'HtmlDocument.Body.get()' which has a LinkDemand. By making this call, 'HtmlDocument.Body.get()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'MainForm.UpdateTab(string)'&#xD;&#xA;   -&gt;'MainForm.UpdateTab(string)'&#xD;&#xA;   -&gt;'MainForm.UpdateFilesList()'&#xD;&#xA;   -&gt;'MainForm.MainForm()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\cbv\Documents\csharpproj\weblogviewer\WebLogViewver" File="MainForm.cs" Line="198">'MainForm.UpdateTab(string)' calls into 'HtmlDocument.Window.get()' which has a LinkDemand. By making this call, 'HtmlDocument.Window.get()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'MainForm.UpdateTab(string)'&#xD;&#xA;   -&gt;'MainForm.UpdateTab(string)'&#xD;&#xA;   -&gt;'MainForm.UpdateFilesList()'&#xD;&#xA;   -&gt;'MainForm.MainForm()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\cbv\Documents\csharpproj\weblogviewer\WebLogViewver" File="MainForm.cs" Line="198">'MainForm.UpdateTab(string)' calls into 'HtmlDocument.operator !=(HtmlDocument, HtmlDocument)' which has a LinkDemand. By making this call, 'HtmlDocument.operator !=(HtmlDocument, HtmlDocument)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'MainForm.UpdateTab(string)'&#xD;&#xA;   -&gt;'MainForm.UpdateTab(string)'&#xD;&#xA;   -&gt;'MainForm.UpdateFilesList()'&#xD;&#xA;   -&gt;'MainForm.MainForm()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\cbv\Documents\csharpproj\weblogviewer\WebLogViewver" File="MainForm.cs" Line="198">'MainForm.UpdateTab(string)' calls into 'HtmlElement.ScrollRectangle.get()' which has a LinkDemand. By making this call, 'HtmlElement.ScrollRectangle.get()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'MainForm.UpdateTab(string)'&#xD;&#xA;   -&gt;'MainForm.UpdateTab(string)'&#xD;&#xA;   -&gt;'MainForm.UpdateFilesList()'&#xD;&#xA;   -&gt;'MainForm.MainForm()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\cbv\Documents\csharpproj\weblogviewer\WebLogViewver" File="MainForm.cs" Line="198">'MainForm.UpdateTab(string)' calls into 'HtmlWindow.ScrollTo(int, int)' which has a LinkDemand. By making this call, 'HtmlWindow.ScrollTo(int, int)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'MainForm.UpdateTab(string)'&#xD;&#xA;   -&gt;'MainForm.UpdateTab(string)'&#xD;&#xA;   -&gt;'MainForm.UpdateFilesList()'&#xD;&#xA;   -&gt;'MainForm.MainForm()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\cbv\Documents\csharpproj\weblogviewer\WebLogViewver" File="MainForm.cs" Line="198">'MainForm.UpdateTab(string)' calls into 'WebBrowser.Document.get()' which has a LinkDemand. By making this call, 'WebBrowser.Document.get()' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'MainForm.UpdateTab(string)'&#xD;&#xA;   -&gt;'MainForm.UpdateTab(string)'&#xD;&#xA;   -&gt;'MainForm.UpdateFilesList()'&#xD;&#xA;   -&gt;'MainForm.MainForm()'</Issue>
             <Issue Certainty="33" Level="CriticalError" Path="c:\Users\cbv\Documents\csharpproj\weblogviewer\WebLogViewver" File="MainForm.cs" Line="198">'MainForm.UpdateTab(string)' calls into 'WebBrowser.DocumentText.set(string)' which has a LinkDemand. By making this call, 'WebBrowser.DocumentText.set(string)' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'MainForm.UpdateTab(string)'&#xD;&#xA;   -&gt;'MainForm.UpdateTab(string)'&#xD;&#xA;   -&gt;'MainForm.UpdateFilesList()'&#xD;&#xA;   -&gt;'MainForm.MainForm()'</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="WblvConfig" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#LoadFromFile(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-07-30 12:55:12Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Users\cbv\Documents\csharpproj\weblogviewer\WebLogViewver" File="WblvConfig.cs" Line="152">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'WblvConfig.LoadFromFile(string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveToFile(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Int32.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2013-07-30 12:55:12Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\cbv\Documents\csharpproj\weblogviewer\WebLogViewver" File="WblvConfig.cs" Line="128">Because the behavior of 'int.ToString()' could vary based on the current user's locale settings, replace this call in 'WblvConfig.SaveToFile(string)' with a call to 'int.ToString(IFormatProvider)'. If the result of 'int.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WatchedDirList" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2013-07-30 12:55:12Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="c:\Users\cbv\Documents\csharpproj\weblogviewer\WebLogViewver" File="WblvConfig.cs" Line="79">Change 'WblvConfig.WatchedDirList' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
   <Name>Assemblies should have valid strong names</Name>
   <Description>Either the assembly has no strong name, an invalid one, or the strong name is valid only because of the computer configuration. The assembly should not be deployed in this state. The most common causes of this are: 1) The assembly's contents were modified after it was signed. 2) The signing process failed. 3) The assembly was delay-signed. 4) A registry key existed that allowed the check to pass (where it would not have otherwise).</Description>
   <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182127(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122">
   <Name>Do not indirectly expose methods with link demands</Name>
   <Description>Do not wrap a method protected by a LinkDemand with a method that does not perform a security check. A LinkDemand checks the permissions of the immediate caller rather than checking the permissions of all callers in the call stack. In this case, the permissions of the wrapper method will be checked. If the wrapper method does not, itself, check the permissions of callers higher in the call stack, malicious code might be able to execute the wrapped function even though it lacks permission to do so.</Description>
   <Resolution Name="Default">{0} calls into {1} which has a LinkDemand. By making this call, {1} is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: {2}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182303(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="33">CriticalError</MessageLevel>
   <File Name="securityrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithNeutralResourcesLanguage" Category="Microsoft.Performance" CheckId="CA1824">
   <Name>Mark assemblies with NeutralResourcesLanguageAttribute</Name>
   <Description>The NeutralResourcesLanguage attribute informs the ResourceManager of the language used to render the neutral culture's resources for an assembly. When looking up resources in the same culture as the neutral resources language, the ResourceManager automatically uses the resources located in the main assembly, instead of searching for a satellite assembly with the current user interface culture for the current thread. This will improve lookup performance for the first resource you load and can reduce your working set.</Description>
   <Resolution Name="Default">Because assembly {0} contains a ResX-based resource file, mark it with the NeutralResourcesLanguage attribute, specifying the language of the resources within the assembly. This could improve lookup performance the first time a resource is retrieved.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb385967(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819">
   <Name>Properties should not return arrays</Name>
   <Description>Properties that return arrays are prone to code inefficiencies. Consider using a collection or making this a method. See the design guidelines for more information.</Description>
   <Resolution Name="Default">Change {0} to return a collection or make it a method.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/0fss9skc(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="IFormatProviderAlternate">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be based on input from the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify {4}.</Resolution>
   <Resolution Name="IFormatProviderAlternateString">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182190(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyMessageBoxOptions" Category="Microsoft.Globalization" CheckId="CA1300">
   <Name>Specify MessageBoxOptions</Name>
   <Description>In order to run correctly on right-to-left systems, all calls to MessageBox.Show should use the overload that specifies MessageBoxOptions as an argument. Programs should detect whether they are running on a right-to-left system at run-time and pass the appropriate MessageBoxOptions value in order to display correctly.</Description>
   <Resolution Name="Default">Change {0} to call the MessageBox.Show overload that specifies MessageBoxOptions, and make sure to set MessageBoxOptions.RightAlign and MessageBoxOptions.RtlReading if RightToLeft is set to RightToLeft.Yes on the parent control.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182191(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="10.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
