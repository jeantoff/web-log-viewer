<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="mscorlib" name="mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="textresources" type="System.Byte[], mscorlib">
    <value>
        77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjxyb290Pg0KICA8IS0tIA0K
        ICAgIE1pY3Jvc29mdCBSZXNYIFNjaGVtYSANCiAgICANCiAgICBWZXJzaW9uIDIuMA0KICAgIA0KICAg
        IFRoZSBwcmltYXJ5IGdvYWxzIG9mIHRoaXMgZm9ybWF0IGlzIHRvIGFsbG93IGEgc2ltcGxlIFhNTCBm
        b3JtYXQgDQogICAgdGhhdCBpcyBtb3N0bHkgaHVtYW4gcmVhZGFibGUuIFRoZSBnZW5lcmF0aW9uIGFu
        ZCBwYXJzaW5nIG9mIHRoZSANCiAgICB2YXJpb3VzIGRhdGEgdHlwZXMgYXJlIGRvbmUgdGhyb3VnaCB0
        aGUgVHlwZUNvbnZlcnRlciBjbGFzc2VzIA0KICAgIGFzc29jaWF0ZWQgd2l0aCB0aGUgZGF0YSB0eXBl
        cy4NCiAgICANCiAgICBFeGFtcGxlOg0KICAgIA0KICAgIC4uLiBhZG8ubmV0L1hNTCBoZWFkZXJzICYg
        c2NoZW1hIC4uLg0KICAgIDxyZXNoZWFkZXIgbmFtZT0icmVzbWltZXR5cGUiPnRleHQvbWljcm9zb2Z0
        LXJlc3g8L3Jlc2hlYWRlcj4NCiAgICA8cmVzaGVhZGVyIG5hbWU9InZlcnNpb24iPjIuMDwvcmVzaGVh
        ZGVyPg0KICAgIDxyZXNoZWFkZXIgbmFtZT0icmVhZGVyIj5TeXN0ZW0uUmVzb3VyY2VzLlJlc1hSZXNv
        dXJjZVJlYWRlciwgU3lzdGVtLldpbmRvd3MuRm9ybXMsIC4uLjwvcmVzaGVhZGVyPg0KICAgIDxyZXNo
        ZWFkZXIgbmFtZT0id3JpdGVyIj5TeXN0ZW0uUmVzb3VyY2VzLlJlc1hSZXNvdXJjZVdyaXRlciwgU3lz
        dGVtLldpbmRvd3MuRm9ybXMsIC4uLjwvcmVzaGVhZGVyPg0KICAgIDxkYXRhIG5hbWU9Ik5hbWUxIj48
        dmFsdWU+dGhpcyBpcyBteSBsb25nIHN0cmluZzwvdmFsdWU+PGNvbW1lbnQ+dGhpcyBpcyBhIGNvbW1l
        bnQ8L2NvbW1lbnQ+PC9kYXRhPg0KICAgIDxkYXRhIG5hbWU9IkNvbG9yMSIgdHlwZT0iU3lzdGVtLkRy
        YXdpbmcuQ29sb3IsIFN5c3RlbS5EcmF3aW5nIj5CbHVlPC9kYXRhPg0KICAgIDxkYXRhIG5hbWU9IkJp
        dG1hcDEiIG1pbWV0eXBlPSJhcHBsaWNhdGlvbi94LW1pY3Jvc29mdC5uZXQub2JqZWN0LmJpbmFyeS5i
        YXNlNjQiPg0KICAgICAgICA8dmFsdWU+W2Jhc2U2NCBtaW1lIGVuY29kZWQgc2VyaWFsaXplZCAuTkVU
        IEZyYW1ld29yayBvYmplY3RdPC92YWx1ZT4NCiAgICA8L2RhdGE+DQogICAgPGRhdGEgbmFtZT0iSWNv
        bjEiIHR5cGU9IlN5c3RlbS5EcmF3aW5nLkljb24sIFN5c3RlbS5EcmF3aW5nIiBtaW1ldHlwZT0iYXBw
        bGljYXRpb24veC1taWNyb3NvZnQubmV0Lm9iamVjdC5ieXRlYXJyYXkuYmFzZTY0Ij4NCiAgICAgICAg
        PHZhbHVlPltiYXNlNjQgbWltZSBlbmNvZGVkIHN0cmluZyByZXByZXNlbnRpbmcgYSBieXRlIGFycmF5
        IGZvcm0gb2YgdGhlIC5ORVQgRnJhbWV3b3JrIG9iamVjdF08L3ZhbHVlPg0KICAgICAgICA8Y29tbWVu
        dD5UaGlzIGlzIGEgY29tbWVudDwvY29tbWVudD4NCiAgICA8L2RhdGE+DQogICAgICAgICAgICAgICAg
        DQogICAgVGhlcmUgYXJlIGFueSBudW1iZXIgb2YgInJlc2hlYWRlciIgcm93cyB0aGF0IGNvbnRhaW4g
        c2ltcGxlIA0KICAgIG5hbWUvdmFsdWUgcGFpcnMuDQogICAgDQogICAgRWFjaCBkYXRhIHJvdyBjb250
        YWlucyBhIG5hbWUsIGFuZCB2YWx1ZS4gVGhlIHJvdyBhbHNvIGNvbnRhaW5zIGEgDQogICAgdHlwZSBv
        ciBtaW1ldHlwZS4gVHlwZSBjb3JyZXNwb25kcyB0byBhIC5ORVQgY2xhc3MgdGhhdCBzdXBwb3J0IA0K
        ICAgIHRleHQvdmFsdWUgY29udmVyc2lvbiB0aHJvdWdoIHRoZSBUeXBlQ29udmVydGVyIGFyY2hpdGVj
        dHVyZS4gDQogICAgQ2xhc3NlcyB0aGF0IGRvbid0IHN1cHBvcnQgdGhpcyBhcmUgc2VyaWFsaXplZCBh
        bmQgc3RvcmVkIHdpdGggdGhlIA0KICAgIG1pbWV0eXBlIHNldC4NCiAgICANCiAgICBUaGUgbWltZXR5
        cGUgaXMgdXNlZCBmb3Igc2VyaWFsaXplZCBvYmplY3RzLCBhbmQgdGVsbHMgdGhlIA0KICAgIFJlc1hS
        ZXNvdXJjZVJlYWRlciBob3cgdG8gZGVwZXJzaXN0IHRoZSBvYmplY3QuIFRoaXMgaXMgY3VycmVudGx5
        IG5vdCANCiAgICBleHRlbnNpYmxlLiBGb3IgYSBnaXZlbiBtaW1ldHlwZSB0aGUgdmFsdWUgbXVzdCBi
        ZSBzZXQgYWNjb3JkaW5nbHk6DQogICAgDQogICAgTm90ZSAtIGFwcGxpY2F0aW9uL3gtbWljcm9zb2Z0
        Lm5ldC5vYmplY3QuYmluYXJ5LmJhc2U2NCBpcyB0aGUgZm9ybWF0IA0KICAgIHRoYXQgdGhlIFJlc1hS
        ZXNvdXJjZVdyaXRlciB3aWxsIGdlbmVyYXRlLCBob3dldmVyIHRoZSByZWFkZXIgY2FuIA0KICAgIHJl
        YWQgYW55IG9mIHRoZSBmb3JtYXRzIGxpc3RlZCBiZWxvdy4NCiAgICANCiAgICBtaW1ldHlwZTogYXBw
        bGljYXRpb24veC1taWNyb3NvZnQubmV0Lm9iamVjdC5iaW5hcnkuYmFzZTY0DQogICAgdmFsdWUgICA6
        IFRoZSBvYmplY3QgbXVzdCBiZSBzZXJpYWxpemVkIHdpdGggDQogICAgICAgICAgICA6IFN5c3RlbS5S
        dW50aW1lLlNlcmlhbGl6YXRpb24uRm9ybWF0dGVycy5CaW5hcnkuQmluYXJ5Rm9ybWF0dGVyDQogICAg
        ICAgICAgICA6IGFuZCB0aGVuIGVuY29kZWQgd2l0aCBiYXNlNjQgZW5jb2RpbmcuDQogICAgDQogICAg
        bWltZXR5cGU6IGFwcGxpY2F0aW9uL3gtbWljcm9zb2Z0Lm5ldC5vYmplY3Quc29hcC5iYXNlNjQNCiAg
        ICB2YWx1ZSAgIDogVGhlIG9iamVjdCBtdXN0IGJlIHNlcmlhbGl6ZWQgd2l0aCANCiAgICAgICAgICAg
        IDogU3lzdGVtLlJ1bnRpbWUuU2VyaWFsaXphdGlvbi5Gb3JtYXR0ZXJzLlNvYXAuU29hcEZvcm1hdHRl
        cg0KICAgICAgICAgICAgOiBhbmQgdGhlbiBlbmNvZGVkIHdpdGggYmFzZTY0IGVuY29kaW5nLg0KDQog
        ICAgbWltZXR5cGU6IGFwcGxpY2F0aW9uL3gtbWljcm9zb2Z0Lm5ldC5vYmplY3QuYnl0ZWFycmF5LmJh
        c2U2NA0KICAgIHZhbHVlICAgOiBUaGUgb2JqZWN0IG11c3QgYmUgc2VyaWFsaXplZCBpbnRvIGEgYnl0
        ZSBhcnJheSANCiAgICAgICAgICAgIDogdXNpbmcgYSBTeXN0ZW0uQ29tcG9uZW50TW9kZWwuVHlwZUNv
        bnZlcnRlcg0KICAgICAgICAgICAgOiBhbmQgdGhlbiBlbmNvZGVkIHdpdGggYmFzZTY0IGVuY29kaW5n
        Lg0KICAgIC0tPg0KICA8eHNkOnNjaGVtYSBpZD0icm9vdCIgeG1sbnM9IiIgeG1sbnM6eHNkPSJodHRw
        Oi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6bXNkYXRhPSJ1cm46c2NoZW1hcy1taWNy
        b3NvZnQtY29tOnhtbC1tc2RhdGEiPg0KICAgIDx4c2Q6aW1wb3J0IG5hbWVzcGFjZT0iaHR0cDovL3d3
        dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlIiAvPg0KICAgIDx4c2Q6ZWxlbWVudCBuYW1lPSJyb290
        IiBtc2RhdGE6SXNEYXRhU2V0PSJ0cnVlIj4NCiAgICAgIDx4c2Q6Y29tcGxleFR5cGU+DQogICAgICAg
        IDx4c2Q6Y2hvaWNlIG1heE9jY3Vycz0idW5ib3VuZGVkIj4NCiAgICAgICAgICA8eHNkOmVsZW1lbnQg
        bmFtZT0ibWV0YWRhdGEiPg0KICAgICAgICAgICAgPHhzZDpjb21wbGV4VHlwZT4NCiAgICAgICAgICAg
        ICAgPHhzZDpzZXF1ZW5jZT4NCiAgICAgICAgICAgICAgICA8eHNkOmVsZW1lbnQgbmFtZT0idmFsdWUi
        IHR5cGU9InhzZDpzdHJpbmciIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICAgICAgPC94c2Q6c2Vx
        dWVuY2U+DQogICAgICAgICAgICAgIDx4c2Q6YXR0cmlidXRlIG5hbWU9Im5hbWUiIHVzZT0icmVxdWly
        ZWQiIHR5cGU9InhzZDpzdHJpbmciIC8+DQogICAgICAgICAgICAgIDx4c2Q6YXR0cmlidXRlIG5hbWU9
        InR5cGUiIHR5cGU9InhzZDpzdHJpbmciIC8+DQogICAgICAgICAgICAgIDx4c2Q6YXR0cmlidXRlIG5h
        bWU9Im1pbWV0eXBlIiB0eXBlPSJ4c2Q6c3RyaW5nIiAvPg0KICAgICAgICAgICAgICA8eHNkOmF0dHJp
        YnV0ZSByZWY9InhtbDpzcGFjZSIgLz4NCiAgICAgICAgICAgIDwveHNkOmNvbXBsZXhUeXBlPg0KICAg
        ICAgICAgIDwveHNkOmVsZW1lbnQ+DQogICAgICAgICAgPHhzZDplbGVtZW50IG5hbWU9ImFzc2VtYmx5
        Ij4NCiAgICAgICAgICAgIDx4c2Q6Y29tcGxleFR5cGU+DQogICAgICAgICAgICAgIDx4c2Q6YXR0cmli
        dXRlIG5hbWU9ImFsaWFzIiB0eXBlPSJ4c2Q6c3RyaW5nIiAvPg0KICAgICAgICAgICAgICA8eHNkOmF0
        dHJpYnV0ZSBuYW1lPSJuYW1lIiB0eXBlPSJ4c2Q6c3RyaW5nIiAvPg0KICAgICAgICAgICAgPC94c2Q6
        Y29tcGxleFR5cGU+DQogICAgICAgICAgPC94c2Q6ZWxlbWVudD4NCiAgICAgICAgICA8eHNkOmVsZW1l
        bnQgbmFtZT0iZGF0YSI+DQogICAgICAgICAgICA8eHNkOmNvbXBsZXhUeXBlPg0KICAgICAgICAgICAg
        ICA8eHNkOnNlcXVlbmNlPg0KICAgICAgICAgICAgICAgIDx4c2Q6ZWxlbWVudCBuYW1lPSJ2YWx1ZSIg
        dHlwZT0ieHNkOnN0cmluZyIgbWluT2NjdXJzPSIwIiBtc2RhdGE6T3JkaW5hbD0iMSIgLz4NCiAgICAg
        ICAgICAgICAgICA8eHNkOmVsZW1lbnQgbmFtZT0iY29tbWVudCIgdHlwZT0ieHNkOnN0cmluZyIgbWlu
        T2NjdXJzPSIwIiBtc2RhdGE6T3JkaW5hbD0iMiIgLz4NCiAgICAgICAgICAgICAgPC94c2Q6c2VxdWVu
        Y2U+DQogICAgICAgICAgICAgIDx4c2Q6YXR0cmlidXRlIG5hbWU9Im5hbWUiIHR5cGU9InhzZDpzdHJp
        bmciIHVzZT0icmVxdWlyZWQiIG1zZGF0YTpPcmRpbmFsPSIxIiAvPg0KICAgICAgICAgICAgICA8eHNk
        OmF0dHJpYnV0ZSBuYW1lPSJ0eXBlIiB0eXBlPSJ4c2Q6c3RyaW5nIiBtc2RhdGE6T3JkaW5hbD0iMyIg
        Lz4NCiAgICAgICAgICAgICAgPHhzZDphdHRyaWJ1dGUgbmFtZT0ibWltZXR5cGUiIHR5cGU9InhzZDpz
        dHJpbmciIG1zZGF0YTpPcmRpbmFsPSI0IiAvPg0KICAgICAgICAgICAgICA8eHNkOmF0dHJpYnV0ZSBy
        ZWY9InhtbDpzcGFjZSIgLz4NCiAgICAgICAgICAgIDwveHNkOmNvbXBsZXhUeXBlPg0KICAgICAgICAg
        IDwveHNkOmVsZW1lbnQ+DQogICAgICAgICAgPHhzZDplbGVtZW50IG5hbWU9InJlc2hlYWRlciI+DQog
        ICAgICAgICAgICA8eHNkOmNvbXBsZXhUeXBlPg0KICAgICAgICAgICAgICA8eHNkOnNlcXVlbmNlPg0K
        ICAgICAgICAgICAgICAgIDx4c2Q6ZWxlbWVudCBuYW1lPSJ2YWx1ZSIgdHlwZT0ieHNkOnN0cmluZyIg
        bWluT2NjdXJzPSIwIiBtc2RhdGE6T3JkaW5hbD0iMSIgLz4NCiAgICAgICAgICAgICAgPC94c2Q6c2Vx
        dWVuY2U+DQogICAgICAgICAgICAgIDx4c2Q6YXR0cmlidXRlIG5hbWU9Im5hbWUiIHR5cGU9InhzZDpz
        dHJpbmciIHVzZT0icmVxdWlyZWQiIC8+DQogICAgICAgICAgICA8L3hzZDpjb21wbGV4VHlwZT4NCiAg
        ICAgICAgICA8L3hzZDplbGVtZW50Pg0KICAgICAgICA8L3hzZDpjaG9pY2U+DQogICAgICA8L3hzZDpj
        b21wbGV4VHlwZT4NCiAgICA8L3hzZDplbGVtZW50Pg0KICA8L3hzZDpzY2hlbWE+DQogIDxyZXNoZWFk
        ZXIgbmFtZT0icmVzbWltZXR5cGUiPg0KICAgIDx2YWx1ZT50ZXh0L21pY3Jvc29mdC1yZXN4PC92YWx1
        ZT4NCiAgPC9yZXNoZWFkZXI+DQogIDxyZXNoZWFkZXIgbmFtZT0idmVyc2lvbiI+DQogICAgPHZhbHVl
        PjIuMDwvdmFsdWU+DQogIDwvcmVzaGVhZGVyPg0KICA8cmVzaGVhZGVyIG5hbWU9InJlYWRlciI+DQog
        ICAgPHZhbHVlPlN5c3RlbS5SZXNvdXJjZXMuUmVzWFJlc291cmNlUmVhZGVyLCBTeXN0ZW0uV2luZG93
        cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3
        N2E1YzU2MTkzNGUwODk8L3ZhbHVlPg0KICA8L3Jlc2hlYWRlcj4NCiAgPHJlc2hlYWRlciBuYW1lPSJ3
        cml0ZXIiPg0KICAgIDx2YWx1ZT5TeXN0ZW0uUmVzb3VyY2VzLlJlc1hSZXNvdXJjZVdyaXRlciwgU3lz
        dGVtLldpbmRvd3MuRm9ybXMsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNL
        ZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5PC92YWx1ZT4NCiAgPC9yZXNoZWFkZXI+DQogIDxkYXRhIG5h
        bWU9IkNvbmZpcm1UYWJDbG9zZSIgeG1sOnNwYWNlPSJwcmVzZXJ2ZSI+DQogICAgPHZhbHVlPkNvbmZp
        cm1lciBsYSBmZXJtZXR1cmUgPzwvdmFsdWU+DQogIDwvZGF0YT4NCjwvcm9vdD4=
</value>
  </data>
</root>